angular.module('app', [
	'ngRoute', 
	'ngResource', 
	'ngMessages', 
	'google-maps'.ns(),
	'app.core',
	'app.user',
	'app.group'
]).config(["$locationProvider", "$routeProvider", "$httpProvider", function($locationProvider, $routeProvider, $httpProvider) {
	$httpProvider.interceptors.push(interceptor);
}])

.directive('menubarLoggedIn', function() {
	return {
		restrict: 'E',
		templateUrl: '/app/modules/core/views/menu/loggedin.html'
	};
})

.directive('menubarLoggedOut', function() {
	return {
		restrict: 'E',
		templateUrl: '/app/modules/core/views/menu/loggedout.html'
	};
});

// Might want to move this to a service.
var interceptor = function($location, $q) {
	return {
		'responseError': function(response) {
			if (response.status === 401){
				$location.url('/login');
			}
			return $q.reject(response);
		}
	};
};
interceptor.$inject = ["$location", "$q"];
angular.module('app.core', ['ngRoute'])
.config(["$routeProvider", function($routeProvider){
	$routeProvider
		.when('/', {
			templateUrl: '/app/modules/core/views/home.html',
			controller: 'HomeController'
		})
		.when('/404',{
			templateUrl: '/app/modules/core/views/404.html'
		})
		.when('/login', {
			templateUrl: '/app/modules/core/views/login.html'
		})
		.when('/about', {
			templateUrl: '/app/modules/core/views/about.html'
		})
		.when('/signup', {
			templateUrl: '/app/modules/core/views/signup.html'
		})
		.otherwise({
			redirectTo: '/404'
		});
}]);
angular.module('app.user', ['ngRoute'])
.config(["$routeProvider", function($routeProvider){
	$routeProvider
		// Profile
		.when('/settings',{
			templateUrl: './app/modules/user/views/user.edit.html',
			controller: 'UserEditController'
		})
		// User Routes
		.when('/users', {
			templateUrl: '/app/modules/core/views/users.html',
			controller: 'UsersController'
		})
		.when('/user/:id', {
			templateUrl: '/app/modules/user/views/user.index.html',
			controller: 'UserController'
		});
}]);
angular.module('app.group', ['ngRoute'])
.config(["$routeProvider", function($routeProvider) {
	$routeProvider
		.when('/groups', {
			templateUrl: '/app/modules/core/views/groups.html',
			controller: 'GroupsController'
		})
		.when('/groups/:id', {
			templateUrl: '/app/modules/group/views/group.index.html',
			controller: 'GroupController'
		})
		.when('/groups/:id/edit', {
			templateUrl: '/app/modules/group/views/group.edit.html',
			controller: 'GroupEditController'
		})
		.when('/group/create', {
			templateUrl: '/app/modules/group/views/group.create.html',
			controller: 'GroupCreateController'
		});
}]);

// Test function, checks to see if user logged in, if not kicks them out. Not needed due to httpInterceptor
var checkLog = function($http, $rootScope, $location){
	$http.get('/session')
		.success(function(data){
			$rootScope.user = data;
		})
		.error(function(data){
			$location.path('/login');
		});
};
angular.module('app.core')
.controller('GroupsController', ["$scope", "Group", function($scope, Group) {
	$scope.groups = Group.query();
}]);
angular.module('app.core')
.controller('HomeController', ["$scope", "UserFactory", function($scope, UserFactory){
	UserFactory.getUser().then(function success(response) {
		$scope.user = response.data;
	});
}]);
// Currently we're grabbing the username in both the menu and index, should sort this out.
angular.module('app.core')
.controller('MenuController', ["$scope", "UserFactory", function($scope, UserFactory) {
	$scope.loggedIn = false;

	UserFactory.getUser().then(function success(response) {
		if (response.data.username) {
			$scope.loggedIn = true;
		}
	});
}]);
angular.module('app.core')
.controller('UsersController', ["$scope", "User", function($scope, User) {
	$scope.users = User.query();
}]);
angular.module('app.core')
.factory('Session', ["$http", function($http) {
	var Session = {
		username: '',
		userid: '',
		isLoggedIn: false,
		init: function() {
			$http.get('/session').success(function(data){
				Session.username = data.username;
				Session.isLoggedIn = true;
			});
		}
	};

	Session.init();
	return Session;
}]);
angular.module('app.core')
.factory('UserFactory', ["$http", function($http) {
	return {
		getUser: getUser
	};

	function getUser(){
		return $http.get('/session');
	}
}]);
angular.module('app.user')
.factory('User', ["$resource", function($resource) {
	return $resource('/api/users/:_id', {}, {
		update:{
			method: 'PUT',
			params: {_id: '@_id'}
		},
		getSignedInUser: {
			method: 'GET',
			url: '/api/users/session/active'
		}
	});
}]);
// Rename to settings. Also need to have some feedback on the changes the user has made.
angular.module('app.user')
.controller('UserEditController', ["$scope", "$routeParams", "User", "$location", function($scope, $routeParams, User, $location){
	User.getSignedInUser({}, function(user){
		$scope.user = user;
	});

	$scope.editUser = function(){
		User.update({
			_id: $scope.user._id,
			name: $scope.user.name,
			email: $scope.user.email,
			home_location: [$scope.user.home_location[0], $scope.user.home_location[0]],
			current_location: [$scope.user.current_location[0], $scope.user.current_location[1]]
		}).$promise.then(function(response){
			console.log(response.error);
		});
	};
}]);
angular.module('app.user')
.controller('UserController', ["$scope", "$routeParams", "User", function($scope, $routeParams, User) {
	User.get({ _id: $routeParams.id }, function(user) {
		$scope.user = user;
	});
}]);
angular.module('app.group')
.controller('GroupCreateController', ["$scope", "$location", "Group", function($scope, $location, Group) {
		$scope.createGroup = function(){
			Group.save({
				name: $scope.name,
				activity: $scope.activity,
				description: $scope.description,
				venue_location: [$scope.locationLat, $scope.locationLong]
			}).$promise.then(function(response){
				alert("Group has been added!");
				$location.path('/groups/' + response._id);
			});
		};
	}]);
angular.module('app.group')
.controller('GroupEditController', ["$scope", "$location", "$routeParams", "Group", function($scope, $location, $routeParams, Group) {
	Group.get({ _id: $routeParams.id }, function(group) {
		$scope.group = group;
	}, function(response){
	});

	$scope.editGroup = function(){
		Group.update({
			_id: $routeParams.id,
			name: $scope.group.name,
			description: $scope.group.description,
			activity: $scope.group.activity,
			venue_location: [$scope.group.venue_location[0], $scope.group.venue_location[1]],
			date_created: $scope.group.date_created,
			members: $scope.group.members
		}).$promise.then(function(response) {

		});
	};
}]);
angular.module('app.group')
.controller('GroupController', ["$scope", "$location", "$routeParams", "$route", "Group", function($scope, $location, $routeParams, $route, Group){
	$scope.group = Group.get({ _id: $routeParams.id }, function(group) {
		$scope.map = {
			center:{
				latitude: group.venue_location[0],
				longitude: group.venue_location[1]
			},
			zoom: 15
		};

		$scope.marker = {
			id: 0,
			coords: {
				latitude: group.venue_location[0],
				longitude: group.venue_location[1]
			}
		};
		
		$scope.marker2 = {
			id: 0,
			coords: {
				latitude: group.members[0].current_location[0],
				longitude: group.members[0].current_location[1]
			}
		};

	}, function(response){
	});

	$scope.editButton = function(){
		$location.path("/groups/"+$routeParams.id+"/edit");
	};

	$scope.deleteButton = function(){
		Group.remove({_id: $routeParams.id}).$promise.then(function(response){
			alert("Group has been deleted!");
			$location.path('/');
		});
	};

	$scope.joinButton = function(){
		Group.addUser({_id: $routeParams.id}).$promise.then(function(response){
			alert("You have joined the group!");
			$route.reload();
		});
	};

	$scope.leaveButton = function(){
		Group.removeUser({_id: $routeParams.id}).$promise.then(function(response){
			alert("You have left the group!");
			$location.path("/");
		});
	};
}]);
angular.module('app.group')
.factory('Group', ["$resource", function($resource) {
	return $resource('/api/groups/:_id', {}, {
		update: {
			method: 'PUT',
			params: {_id: '@_id'}
		},
		addUser: {
			method: 'PUT',
			url: '/api/groups/:_id/addUser',
			params: {_id: '@_id'}
		},
		removeUser: {
			method: 'PUT',
			url: '/api/groups/:_id/removeUser',
			params: {_id: '@_id'}
		}
	});
}]);